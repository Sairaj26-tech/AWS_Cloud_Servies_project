{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Install WordPress server, and database fronted by PANW Firewall (sample-cft).",

 "Parameters": {
    "BootstrapBucketName":{
        "Description": "Bucket name for FW bootstrap configuration",
        "Type": "String"
    },
    "ServerKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the FW (Hint: You MUST have its private key)",
      "Type": "AWS::EC2::KeyPair::KeyName"
    }
  },

  "Mappings": {
    "PANFWRegionMap" : {
        "us-west-2"      :  { "AMI": "ami-d28992ab"},
        "ap-northeast-1" :  { "AMI": "ami-ab04e7cd"},
        "us-west-1"      :  { "AMI": "ami-0f88a16f"},
        "ap-northeast-2" :  { "AMI": "ami-6cbd6402"},
        "ap-southeast-1" :  { "AMI": "ami-1897057b"},
        "ap-southeast-2" :  { "AMI": "ami-8ed3cced"},
        "eu-central-1"   :  { "AMI": "ami-6df35f02"},
        "eu-west-1"      :  { "AMI": "ami-86d63eff"},
        "eu-west-2"      :  { "AMI": "ami-3c170658"},
        "sa-east-1"      :  { "AMI": "ami-15651279"},
        "us-east-1"      :  { "AMI": "ami-7dcb9906"},
        "us-east-2"      :  { "AMI": "ami-f1200094"},
        "ca-central-1"   :  { "AMI": "ami-0f08b76b"},
        "ap-south-1"     :  { "AMI": "ami-1ffc8470"}
    },

    "UbuntuRegionMap" : {
        "us-west-2"      :  { "AMI": "ami-efd0428f" },
        "ap-northeast-1" :  { "AMI": "ami-afb09dc8" },
        "us-west-1"      :  { "AMI": "ami-2afbde4a" },
        "ap-northeast-2" :  { "AMI": "ami-66e33108" },
        "ap-southeast-1" :  { "AMI": "ami-8fcc75ec" },
        "ap-southeast-2" :  { "AMI": "ami-96666ff5" },
        "eu-central-1"   :  { "AMI": "ami-060cde69" },
        "eu-west-1"      :  { "AMI": "ami-a8d2d7ce" },
        "eu-west-2"      :  { "AMI": "ami-f1d7c395" },
        "sa-east-1"      :  { "AMI": "ami-4090f22c" },
        "us-east-1"      :  { "AMI": "ami-80861296" },
        "us-east-2"      :  { "AMI": "ami-618fab04" },
        "ca-central-1"   :  { "AMI": "ami-b3d965d7" },
        "ap-south-1"     :  { "AMI": "ami-c2ee9dad" }
    }
  },

  "Resources": {
    "BootstrapRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                "Action": "sts:AssumeRole"
                } ]
            },
            "Path":"/",
            "Policies": [ {
                "PolicyName" : "BootstrapRolePolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": "s3:ListBucket",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "BootstrapBucketName" }]]}
                    },
                    {
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                         "Resource": { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "BootstrapBucketName" } , "/*" ]]}
                    }]
                }
            }]
        }
    },
    "BootstrapInstanceProfile":{
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [ {
              "Ref": "BootstrapRole"
            }]
        }
    },

    "NewVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      }
    },

    "PublicElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

    "ManagementElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

    "NewDBSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.2.0/24",
        "VpcId": {"Ref": "NewVPC"},
        "AvailabilityZone": "" ,
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      },
      "DependsOn": "NewVPC"
    },

    "NewPublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "VpcId": {"Ref": "NewVPC"},
        "AvailabilityZone": { "Fn::GetAtt" : [ "NewDBSubnet", "AvailabilityZone" ] },
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      },
      "DependsOn": [ "NewVPC", "NewDBSubnet" ]
    },

    "NewWebSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": { "Fn::GetAtt" : [ "NewDBSubnet", "AvailabilityZone" ] },
        "VpcId": {"Ref": "NewVPC"},
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      },
      "DependsOn":[ "NewVPC", "NewDBSubnet" ]
    },

    "igweb3def8e": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{ "Key": "Name", "Value": "PAN Sample CFT" }]
      }
    },

    "dopt21c7d043": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "us-west-2.compute.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },

    "aclb765d6d2": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "rtb059a2460": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "rtb049a2461": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "FWManagementNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 MGMT",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.99",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "WP AWS FW1 MGMT"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWPublicNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 E1/1",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.100",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "WP AWS FW1 E1/1"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWPrivate12NetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 E1/2",
        "SubnetId": {"Ref": "NewWebSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.1.11",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "WP AWS FW1 E1/2"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWPrivate13NetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 E1/3",
        "SubnetId": {"Ref": "NewDBSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.2.11",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name", "Value": "WP AWS FW1 E1/3"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWEIPMAnagementAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "ManagementElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "FWManagementNetworkInterface" }
       },
       "DependsOn": [ "FWManagementNetworkInterface", "ManagementElasticIP" ]
    },

    "FWEIPPublicAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "PublicElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "FWPublicNetworkInterface" }
       },
       "DependsOn": [ "FWPublicNetworkInterface", "PublicElasticIP" ]
    },

    "sgWideOpen": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Wide open security group",
        "VpcId": {"Ref": "NewVPC"},
         "Tags": [{"Key": "Name","Value": "Lab External SG"}],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress" : [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
          ]
      }
    },

    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "aclb765d6d2"
        }
      }
    },

    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "aclb765d6d2"
        }
      }
    },

    "subnetacl1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewDBSubnet"}
      }
    },
    "subnetacl2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewPublicSubnet"}
      }
    },
    "subnetacl3": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewWebSubnet"}
      }
    },

    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"},
        "InternetGatewayId": {"Ref": "igweb3def8e"}
      }
    },

    "subnetroute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "rtb049a2461"},
        "SubnetId": {"Ref": "NewPublicSubnet"}
      }
    },

    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "rtb059a2460"},
        "GatewayId": {"Ref": "igweb3def8e"}
      },
      "DependsOn": "gw1"
    },

    "route2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "rtb049a2461"},
        "GatewayId": {"Ref": "igweb3def8e"}
      },
      "DependsOn": "gw1"
    },

    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"},
        "DhcpOptionsId": {"Ref": "dopt21c7d043"}
      }
    },

    "FWInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "IamInstanceProfile": {"Ref": "BootstrapInstanceProfile"},
        "InstanceInitiatedShutdownBehavior": "stop",
        "EbsOptimized": "true",
        "ImageId": { "Fn::FindInMap" : [ "PANFWRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "m4.xlarge",
        "BlockDeviceMappings" :
        [
            {
              "DeviceName" : "/dev/xvda",
              "Ebs" :
              {
                "VolumeType" : "gp2",
                "DeleteOnTermination" : "true",
                "VolumeSize" : "60"
              }
            }
        ],
        "KeyName":  { "Ref" : "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "WP VM-Series Firewall" }],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": { "Ref": "FWManagementNetworkInterface"},
            "DeviceIndex": 0
          },
          {
            "NetworkInterfaceId": { "Ref": "FWPublicNetworkInterface"},
            "DeviceIndex": 1
          },
          {
            "NetworkInterfaceId": { "Ref": "FWPrivate12NetworkInterface"},
            "DeviceIndex": 2
          },
          {
            "NetworkInterfaceId": { "Ref": "FWPrivate13NetworkInterface"},
            "DeviceIndex": 3
          }
        ],
        "UserData":  { "Fn::Base64" : { "Fn::Join" : ["", [
            "vmseries-bootstrap-aws-s3bucket=",  { "Ref" : "BootstrapBucketName" }
        ]]}}
      },
      "DependsOn": [ "FWPublicNetworkInterface", "FWPrivate12NetworkInterface", "FWPrivate13NetworkInterface", "NewPublicSubnet" ]
    },

    "WPDBServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": { "Fn::FindInMap" : [ "UbuntuRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "t2.micro",
        "KeyName": { "Ref": "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "WP DB Server 1" }],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "NewDBSubnet"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.2.101",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgWideOpen"
              }
            ]
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#! /bin/bash\n",

            "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
            "echo \"export new_routers='",{"Fn::GetAtt" : [ "FWPrivate13NetworkInterface", "PrimaryPrivateIpAddress" ]},"'\" >> /etc/dhcp/dhclient-enter-hooks.d/aws-default-route\n",
            "ifdown eth0\n",
            "ifup eth0\n",
            "while true\n",
            " do\n",
            "  resp=$(curl -s -S -g --insecure \"https://",{"Ref": "ManagementElasticIP"},"/api/?type=op&cmd=<show><chassis-ready></chassis-ready></show>&key=LUFRPT10VGJKTEV6a0R4L1JXd0ZmbmNvdUEwa25wMlU9d0N5d292d2FXNXBBeEFBUW5pV2xoZz09\")\n",
            "  if [[ $resp == *\"[CDATA[yes\"* ]] ; then\n",
            "    break\n",
            "  fi\n",
            " sleep 10s\n",
            "done\n",
            "sudo apt-get update\n",
            "sudo apt-get -y install debconf-utils\n",
            "echo \"mysql-server mysql-server/root_password password paloalto@123\" | sudo debconf-set-selections\n",
            "echo \"mysql-server mysql-server/root_password_again password paloalto@123\" | sudo debconf-set-selections\n",
            "DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server\n",
            "mysql -uroot -ppaloalto@123 -e \"DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\"\n",
            "mysql -uroot -ppaloalto@123 -e \"DELETE FROM mysql.user WHERE User='';\"\n",
            "mysql -uroot -ppaloalto@123 -e \"DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_localhost';\"\n",
            "mysql -uroot -ppaloalto@123 -e \"FLUSH PRIVILEGES;\"\n",
            "sudo sed -i \"s/.*bind-address.*/bind-address = 0.0.0.0/\" /etc/mysql/mysql.conf.d/mysqld.cnf\n",
            "sudo systemctl restart mysql\n",
            "mysql -uroot -ppaloalto@123 -e \"CREATE DATABASE Demo;\"\n",
            "mysql -uroot -ppaloalto@123 -e \"CREATE USER 'demouser'@'%' IDENTIFIED BY 'paloalto@123';\"\n",
            "mysql -uroot -ppaloalto@123 -e \"GRANT ALL PRIVILEGES ON Demo.* TO 'demouser'@'%';\"\n",
            "mysql -uroot -ppaloalto@123 -e \"FLUSH PRIVILEGES;\"\n"
        ]]}
      }},
      "DependsOn": [ "NewDBSubnet", "sgWideOpen" ]
    },

    "WPWebInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": { "Fn::FindInMap" : [ "UbuntuRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": "t2.micro",
        "KeyName": { "Ref": "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{"Key": "Name","Value": "WP Web Server 1"}],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "NewWebSubnet"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.1.101",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgWideOpen"
              }
            ]
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#! /bin/bash\n",

            "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
            "echo \"export new_routers='",{"Fn::GetAtt" : [ "FWPrivate12NetworkInterface", "PrimaryPrivateIpAddress" ]},"'\" >> /etc/dhcp/dhclient-enter-hooks.d/aws-default-route\n",
            "ifdown eth0\n",
            "ifup eth0\n",

            "while true\n",
            "  do\n",
            "   resp=$(curl -s -S -g --insecure \"https://",{"Ref": "ManagementElasticIP"},"/api/?type=op&cmd=<show><chassis-ready></chassis-ready></show>&key=LUFRPT10VGJKTEV6a0R4L1JXd0ZmbmNvdUEwa25wMlU9d0N5d292d2FXNXBBeEFBUW5pV2xoZz09\")\n",
            "   if [[ $resp == *\"[CDATA[yes\"* ]] ; then\n",
            "     break\n",
            "   fi\n",
            "  sleep 10s\n",
            "done\n",
            "apt-get update\n",
            "apt-get install -y apache2 wordpress\n",
            "ln -sf /usr/share/wordpress /var/www/html/wordpress\n",
            "gzip -d /usr/share/doc/wordpress/examples/setup-mysql.gz\n",
            "while true\n",
            " do\n",
            "  resp=$(mysql -udemouser -ppaloalto@123 -h ",{"Fn::GetAtt" : [ "WPDBServerInstance", "PrivateIp" ]}," -e 'show databases')\n",
            "  if [[ $resp == *\"Demo\"* ]]; then\n",
            "     break\n",
            "  fi\n",
            " sleep 5s\n",
            "done\n",

            "bash /usr/share/doc/wordpress/examples/setup-mysql -n Demo -t ",{"Fn::GetAtt" : [ "WPDBServerInstance", "PrivateIp" ]}," ",{"Fn::GetAtt" : [ "WPDBServerInstance", "PrivateIp" ]},"\n",
            "sed -i \"s/define('DB_USER'.*/define('DB_USER', 'demouser');/g\" /etc/wordpress/config-",{"Fn::GetAtt" : [ "WPDBServerInstance", "PrivateIp" ]},".php\n",
            "sed -i \"s/define('DB_PASSWORD'.*/define('DB_PASSWORD', 'paloalto@123');/g\" /etc/wordpress/config-",{"Fn::GetAtt" : [ "WPDBServerInstance", "PrivateIp" ]},".php\n",
            "mv /etc/wordpress/config-",{"Fn::GetAtt" : [ "WPDBServerInstance", "PrivateIp" ]},".php /etc/wordpress/config-",{ "Ref": "PublicElasticIP" },".php\n",
            "wget -O /usr/lib/cgi-bin/guess-sql-root-password.cgi https://raw.githubusercontent.com/PaloAltoNetworks/aws/master/two-tier-sample/guess-sql-root-password.cgi\n",
            "chmod +x /usr/lib/cgi-bin/guess-sql-root-password.cgi\n",
            "sed -i \"s/DB-IP-ADDRESS/",{"Fn::GetAtt" : [ "WPDBServerInstance", "PrivateIp" ]},"/g\" /usr/lib/cgi-bin/guess-sql-root-password.cgi\n",
            "wget -O /usr/lib/cgi-bin/ssh-to-db.cgi https://raw.githubusercontent.com/PaloAltoNetworks/aws/master/two-tier-sample/ssh-to-db.cgi\n",
            "chmod +x /usr/lib/cgi-bin/ssh-to-db.cgi\n",
            "sed -i \"s/DB-IP-ADDRESS/",{"Fn::GetAtt" : [ "WPDBServerInstance", "PrivateIp" ]},"/g\" /usr/lib/cgi-bin/ssh-to-db.cgi\n",
            "wget -O /var/www/html/sql-attack.html https://raw.githubusercontent.com/PaloAltoNetworks/aws/master/two-tier-sample/sql-attack.html\n",
            "ln -sf /etc/apache2/conf-available/serve-cgi-bin.conf /etc/apache2/conf-enabled/serve-cgi-bin.conf\n",
            "ln -sf /etc/apache2/mods-available/cgi.load /etc/apache2/mods-enabled/cgi.load\n",
            "systemctl restart apache2\n"
          ]]}
        }
      },
      "DependsOn": [ "NewWebSubnet", "sgWideOpen", "PublicElasticIP" ]
    }

  },

  "Outputs": {
    "FirewallManagementURL": {
      "Description": "VM-Series management interface URL",
      "Value": { "Fn::Join" : ["", [
        "https://",
        { "Ref": "ManagementElasticIP"}
      ]]}
    },

    "WordpressURL": {
      "Description": "Wordpress server",
      "Value": { "Fn::Join" : ["", [
        "http://",
        { "Ref": "PublicElasticIP" },
        "/wordpress"
      ]]}
    }
  }
}
